clc
clear all
% Inputing the number of links
Number_of_Joints = input(' Enter the Number of joints in the Robot - ');
disp(' ');
Type_of_Links   = input('enter 1 if all joints are revolute and 2 if they are prismatic- ');
disp(' ');% Defining type of link

XX = input(' enter 1 for entering DH parameters, or 2 if you do not have them: ');
disp(' ');% entering defination to undertand the robot

%% If joints are revolute
if(Type_of_Links==1)
    
if (XX==1)
    % Defining the DH Parameters for the robot
    
disp(' Now enter the prompted values in ascending order from link i to n')
disp('Note that a link connects two joints. Previous joint refers to the joint closer to the base in hierarchy')


for i = 1:Number_of_Joints
    a(i,1)     = input(' Link Length - ');
    d(i,1)     = input(' Distance along the previous joint axis - ');
    %revolute joints have no theta input
    %theta(i,1) = input(' Angle theta(about the previous joint) in radians - ');
    disp(' '); 
end
disp(' ');
disp(' Entered DH Parameters are - ');
disp(' ');
disp(' a  d alpha');

dh = [d a alpha]

else % Describing the robot using minimal data and finding the DH parameters
    disp(' Now enter the prompted values in ascending order from the base to the end effector: ')
    for i = 1:Number_of_Joints
    link_l(i,1)     = input(' Length of link - '); %This is a
    zdist(i,1)     = input(' Distance between joints along the previous joint axis ');%This is d
    zangle(i,1) = input(' angle between the z axes of consecutive joints - ');%This is alpha
    disp(' ');
    end
    theta = zeros(1,Number_of_Joints);
    disp(' ');
    disp(' DH Parameters generated by Inputed Parameters are - ');
    disp(' ');
    disp(' a  d  alpha');
    dh = [zdist link_l zangle]
    disp(' ');
end
% Using RVCtools defining the links 

for k = 1:Number_of_Joints
    L{k} = Link('d',dh(k,1), 'a', dh(k,2), 'alpha', dh(k,3));
end

%Now take input from the user
disp('Please input joint angles sequentially from 1 to n')

q=[];
for i=1:Number_of_Joints
    
    q(i)=input('Input next joint angle')
end

%% If joints are prismatic

elseif(Type_of_Links==2)
    
    if (XX==1)
    % Defining the DH Parameters for the robot
    
disp(' Now enter the prompted values in ascending order from link i to n')
disp('Note that a link connects two joints. Previous joint refers to the joint closer to the base in hierarchy')


for i = 1:Number_of_Joints
    a(i,1)     = input(' Link Length - ');
    %d(i,1)     = input(' Distance along the previous joint axis - ');
    %prismatic joints have no d input
    theta(i,1) = input(' Angle theta(about the previous joint) in radians - ');
    disp(' '); 
end
disp(' ');
disp(' Entered DH Parameters are - ');
disp(' ');
disp(' theta  a alpha');

dh = [theta a alpha]

else % Describing the robot using minimal data and finding the DH parameters
    disp(' Now enter the prompted values in ascending order from the base to the end effector: ')
    for i = 1:Number_of_Joints
    link_l(i,1)     = input(' Length of link - '); %This is a
    %zdist(i,1)     = input(' Distance between joints along the previous
    %joint axis ');% No d input in the prismatic case
    zangle(i,1) = input(' angle between the z axes of consecutive joints - ');%This is alpha
    joint_angle(i,1)=input('angle between joints about the previous joint axis')
    disp(' ');
    end
    theta = zeros(1,Number_of_Joints);
    disp(' ');
    disp(' DH Parameters generated by Inputed Parameters are: ');
    disp(' ');
    disp(' theta  a  alpha');
    dh = [joint_angle link_l zangle]
    disp(' ');
end
% Using RVCtools defining the links 
    
    
    % For all prismatic as they require some joint limits
    disp(' For prismatic joints, joint limits need to be specified - ')
    for m = 1:Number_of_Joints
        limitlow(m)   = input(' Lower limit for the joint - ');
        limitupper(m) = input(' Upper limit for the joint - ');
        disp(' ')
    end
    for n = 1:Number_of_Joints
        L{m}.qlim = [limitlow(m), limitupper(m)];
    end
    for k = 1:Number_of_Joints
    L{k} = Link('theta',dh(k,1), 'a', dh(k,2), 'alpha', dh(k,3));
    end


q=[];
disp('Input actuation distances now')
for i=1:Number_of_Joints
    
    q(i)=input('Input next joint distance')
end
end

    
    

%% Making links using RVC Tools
% Link_array=[]
for b = 1:Number_of_Joints
    X(b) = L{b};
end
n = 1:Number_of_Joints;
m =[X(n)];

%The following is the robot object
R = SerialLink(m);
disp(' Given these inputs, the transformation matrix is as follows')
T = R.fkine(q) % using the unconstrained inverse kinematic function finding the inverse for the robot
plot(R, q)
teach(R)

